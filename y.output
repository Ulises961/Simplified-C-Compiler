Terminals unused in grammar

    CHAR
    BREAK
    IF
    ELSE
    WHILE
    DO
    TRUE
    FALSE


Grammar

    0 $accept: program $end

    1 program: program statement '\n'
    2        | %empty

    3 statement: varDecl ';'
    4          | expr ';'
    5          | RETURN ';'

    6 varDecl: typeSpec ID ':' expr

    7 typeSpec: INT
    8         | BOOLEAN

    9 expr: intExpr
   10     | boolExpr
   11     | relExpr

   12 intExpr: intExpr '+' intExpr
   13        | intExpr '-' intExpr
   14        | intExpr '*' intExpr
   15        | intExpr '/' intExpr
   16        | NUM
   17        | '-' intExpr
   18        | '(' intExpr ')'

   19 boolExpr: boolExpr AND boolExpr
   20         | boolExpr OR boolExpr
   21         | NOT boolExpr
   22         | BOOL
   23         | '(' boolExpr ')'

   24 relExpr: expr SMEQ expr
   25        | expr SM expr
   26        | expr GR expr
   27        | expr GREQ expr
   28        | expr EQ expr
   29        | expr NEQ expr
   30        | '(' relExpr ')'


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1
    '(' (40) 18 23 30
    ')' (41) 18 23 30
    '*' (42) 14
    '+' (43) 12
    '-' (45) 13 17
    '/' (47) 15
    ':' (58) 6
    ';' (59) 3 4 5
    error (256)
    NUM <integer> (258) 16
    BOOL <integer> (259) 22
    ID <lexeme> (260) 6
    CHAR (261)
    BREAK (262)
    AND (263) 19
    OR (264) 20
    NOT (265) 21
    IF (266)
    ELSE (267)
    WHILE (268)
    DO (269)
    SMEQ (270) 24
    SM (271) 25
    GR (272) 26
    GREQ (273) 27
    EQ (274) 28
    NEQ (275) 29
    TRUE (276)
    FALSE (277)
    RETURN (278) 5
    INT <lexeme> (279) 7
    BOOLEAN <lexeme> (280) 8
    UMINUS (281)


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program (37)
        on left: 1 2
        on right: 0 1
    statement (38)
        on left: 3 4 5
        on right: 1
    varDecl (39)
        on left: 6
        on right: 3
    typeSpec <lexeme> (40)
        on left: 7 8
        on right: 6
    expr <integer> (41)
        on left: 9 10 11
        on right: 4 6 24 25 26 27 28 29
    intExpr <integer> (42)
        on left: 12 13 14 15 16 17 18
        on right: 9 12 13 14 15 17 18
    boolExpr <integer> (43)
        on left: 19 20 21 22 23
        on right: 10 19 20 21 23
    relExpr <integer> (44)
        on left: 24 25 26 27 28 29 30
        on right: 11 30


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . statement '\n'

    $end     shift, and go to state 2
    NUM      shift, and go to state 3
    BOOL     shift, and go to state 4
    NOT      shift, and go to state 5
    RETURN   shift, and go to state 6
    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    '-'      shift, and go to state 9
    '('      shift, and go to state 10

    statement  go to state 11
    varDecl    go to state 12
    typeSpec   go to state 13
    expr       go to state 14
    intExpr    go to state 15
    boolExpr   go to state 16
    relExpr    go to state 17


State 2

    0 $accept: program $end .

    $default  accept


State 3

   16 intExpr: NUM .

    $default  reduce using rule 16 (intExpr)


State 4

   22 boolExpr: BOOL .

    $default  reduce using rule 22 (boolExpr)


State 5

   21 boolExpr: NOT . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 18

    boolExpr  go to state 19


State 6

    5 statement: RETURN . ';'

    ';'  shift, and go to state 20


State 7

    7 typeSpec: INT .

    $default  reduce using rule 7 (typeSpec)


State 8

    8 typeSpec: BOOLEAN .

    $default  reduce using rule 8 (typeSpec)


State 9

   17 intExpr: '-' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 9
    '('  shift, and go to state 21

    intExpr  go to state 22


State 10

   18 intExpr: '(' . intExpr ')'
   23 boolExpr: '(' . boolExpr ')'
   30 relExpr: '(' . relExpr ')'

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 23
    intExpr   go to state 24
    boolExpr  go to state 25
    relExpr   go to state 26


State 11

    1 program: program statement . '\n'

    '\n'  shift, and go to state 27


State 12

    3 statement: varDecl . ';'

    ';'  shift, and go to state 28


State 13

    6 varDecl: typeSpec . ID ':' expr

    ID  shift, and go to state 29


State 14

    4 statement: expr . ';'
   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr

    SMEQ  shift, and go to state 30
    SM    shift, and go to state 31
    GR    shift, and go to state 32
    GREQ  shift, and go to state 33
    EQ    shift, and go to state 34
    NEQ   shift, and go to state 35
    ';'   shift, and go to state 36


State 15

    9 expr: intExpr .
   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr

    '-'  shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 9 (expr)


State 16

   10 expr: boolExpr .
   19 boolExpr: boolExpr . AND boolExpr
   20         | boolExpr . OR boolExpr

    AND  shift, and go to state 41
    OR   shift, and go to state 42

    $default  reduce using rule 10 (expr)


State 17

   11 expr: relExpr .

    $default  reduce using rule 11 (expr)


State 18

   23 boolExpr: '(' . boolExpr ')'

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 18

    boolExpr  go to state 43


State 19

   19 boolExpr: boolExpr . AND boolExpr
   20         | boolExpr . OR boolExpr
   21         | NOT boolExpr .

    $default  reduce using rule 21 (boolExpr)


State 20

    5 statement: RETURN ';' .

    $default  reduce using rule 5 (statement)


State 21

   18 intExpr: '(' . intExpr ')'

    NUM  shift, and go to state 3
    '-'  shift, and go to state 9
    '('  shift, and go to state 21

    intExpr  go to state 44


State 22

   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr
   17        | '-' intExpr .

    $default  reduce using rule 17 (intExpr)


State 23

   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr

    SMEQ  shift, and go to state 30
    SM    shift, and go to state 31
    GR    shift, and go to state 32
    GREQ  shift, and go to state 33
    EQ    shift, and go to state 34
    NEQ   shift, and go to state 35


State 24

    9 expr: intExpr .
   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr
   18        | '(' intExpr . ')'

    '-'  shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ')'  shift, and go to state 45

    $default  reduce using rule 9 (expr)


State 25

   10 expr: boolExpr .
   19 boolExpr: boolExpr . AND boolExpr
   20         | boolExpr . OR boolExpr
   23         | '(' boolExpr . ')'

    AND  shift, and go to state 41
    OR   shift, and go to state 42
    ')'  shift, and go to state 46

    $default  reduce using rule 10 (expr)


State 26

   11 expr: relExpr .
   30 relExpr: '(' relExpr . ')'

    ')'  shift, and go to state 47

    $default  reduce using rule 11 (expr)


State 27

    1 program: program statement '\n' .

    $default  reduce using rule 1 (program)


State 28

    3 statement: varDecl ';' .

    $default  reduce using rule 3 (statement)


State 29

    6 varDecl: typeSpec ID . ':' expr

    ':'  shift, and go to state 48


State 30

   24 relExpr: expr SMEQ . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 49
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 31

   25 relExpr: expr SM . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 50
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 32

   26 relExpr: expr GR . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 51
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 33

   27 relExpr: expr GREQ . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 52
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 34

   28 relExpr: expr EQ . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 53
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 35

   29 relExpr: expr NEQ . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 54
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 36

    4 statement: expr ';' .

    $default  reduce using rule 4 (statement)


State 37

   13 intExpr: intExpr '-' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 9
    '('  shift, and go to state 21

    intExpr  go to state 55


State 38

   12 intExpr: intExpr '+' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 9
    '('  shift, and go to state 21

    intExpr  go to state 56


State 39

   14 intExpr: intExpr '*' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 9
    '('  shift, and go to state 21

    intExpr  go to state 57


State 40

   15 intExpr: intExpr '/' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 9
    '('  shift, and go to state 21

    intExpr  go to state 58


State 41

   19 boolExpr: boolExpr AND . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 18

    boolExpr  go to state 59


State 42

   20 boolExpr: boolExpr OR . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 18

    boolExpr  go to state 60


State 43

   19 boolExpr: boolExpr . AND boolExpr
   20         | boolExpr . OR boolExpr
   23         | '(' boolExpr . ')'

    AND  shift, and go to state 41
    OR   shift, and go to state 42
    ')'  shift, and go to state 46


State 44

   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr
   18        | '(' intExpr . ')'

    '-'  shift, and go to state 37
    '+'  shift, and go to state 38
    '*'  shift, and go to state 39
    '/'  shift, and go to state 40
    ')'  shift, and go to state 45


State 45

   18 intExpr: '(' intExpr ')' .

    $default  reduce using rule 18 (intExpr)


State 46

   23 boolExpr: '(' boolExpr ')' .

    $default  reduce using rule 23 (boolExpr)


State 47

   30 relExpr: '(' relExpr ')' .

    $default  reduce using rule 30 (relExpr)


State 48

    6 varDecl: typeSpec ID ':' . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 9
    '('   shift, and go to state 10

    expr      go to state 61
    intExpr   go to state 15
    boolExpr  go to state 16
    relExpr   go to state 17


State 49

   24 relExpr: expr . SMEQ expr
   24        | expr SMEQ expr .
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr

    $default  reduce using rule 24 (relExpr)


State 50

   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   25        | expr SM expr .
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr

    $default  reduce using rule 25 (relExpr)


State 51

   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   26        | expr GR expr .
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr

    $default  reduce using rule 26 (relExpr)


State 52

   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   27        | expr GREQ expr .
   28        | expr . EQ expr
   29        | expr . NEQ expr

    $default  reduce using rule 27 (relExpr)


State 53

   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   28        | expr EQ expr .
   29        | expr . NEQ expr

    $default  reduce using rule 28 (relExpr)


State 54

   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr
   29        | expr NEQ expr .

    $default  reduce using rule 29 (relExpr)


State 55

   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   13        | intExpr '-' intExpr .
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr

    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 13 (intExpr)


State 56

   12 intExpr: intExpr . '+' intExpr
   12        | intExpr '+' intExpr .
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr

    '*'  shift, and go to state 39
    '/'  shift, and go to state 40

    $default  reduce using rule 12 (intExpr)


State 57

   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   14        | intExpr '*' intExpr .
   15        | intExpr . '/' intExpr

    $default  reduce using rule 14 (intExpr)


State 58

   12 intExpr: intExpr . '+' intExpr
   13        | intExpr . '-' intExpr
   14        | intExpr . '*' intExpr
   15        | intExpr . '/' intExpr
   15        | intExpr '/' intExpr .

    $default  reduce using rule 15 (intExpr)


State 59

   19 boolExpr: boolExpr . AND boolExpr
   19         | boolExpr AND boolExpr .
   20         | boolExpr . OR boolExpr

    $default  reduce using rule 19 (boolExpr)


State 60

   19 boolExpr: boolExpr . AND boolExpr
   20         | boolExpr . OR boolExpr
   20         | boolExpr OR boolExpr .

    $default  reduce using rule 20 (boolExpr)


State 61

    6 varDecl: typeSpec ID ':' expr .
   24 relExpr: expr . SMEQ expr
   25        | expr . SM expr
   26        | expr . GR expr
   27        | expr . GREQ expr
   28        | expr . EQ expr
   29        | expr . NEQ expr

    SMEQ  shift, and go to state 30
    SM    shift, and go to state 31
    GR    shift, and go to state 32
    GREQ  shift, and go to state 33
    EQ    shift, and go to state 34
    NEQ   shift, and go to state 35

    $default  reduce using rule 6 (varDecl)
