Terminals unused in grammar

   CHAR
   BREAK
   IF
   ELSE
   WHILE
   DO
   EQ
   NEQ
   GREQ
   GR
   SM
   SMEQ
   TRUE
   FALSE


Grammar

    0 $accept: program $end

    1 program: intExpr '\n'
    2        | boolExpr '\n'
    3        | ID '\n'
    4        | INT '\n'
    5        | declaration

    6 declaration: typedec ID ':' intExpr '\n'
    7            | typedec ID ':' boolExpr '\n'

    8 typedec: INT
    9        | BOOLEAN

   10 intExpr: intExpr '+' intExpr
   11        | intExpr '-' intExpr
   12        | intExpr '*' intExpr
   13        | intExpr '/' intExpr
   14        | NUM
   15        | '-' intExpr
   16        | '(' intExpr ')'

   17 boolExpr: boolExpr AND boolExpr
   18         | boolExpr OR boolExpr
   19         | NOT boolExpr
   20         | BOOL
   21         | '(' boolExpr ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1 2 3 4 6 7
'(' (40) 16 21
')' (41) 16 21
'*' (42) 12
'+' (43) 10
'-' (45) 11 15
'/' (47) 13
':' (58) 6 7
error (256)
NUM <integer> (258) 14
BOOL <boolean> (259) 20
ID <lexeme> (260) 3 6 7
CHAR (261)
BREAK (262)
AND (263) 17
OR (264) 18
NOT (265) 19
IF (266)
ELSE (267)
WHILE (268)
DO (269)
EQ (270)
NEQ (271)
GREQ (272)
GR (273)
SM (274)
SMEQ (275)
TRUE (276)
FALSE (277)
INT <lexeme> (278) 4 8
BOOLEAN <lexeme> (279) 9
UMINUS (280)


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1 2 3 4 5, on right: 0
declaration (36)
    on left: 6 7, on right: 5
typedec <lexeme> (37)
    on left: 8 9, on right: 6 7
intExpr <integer> (38)
    on left: 10 11 12 13 14 15 16, on right: 1 6 10 11 12 13 15 16
boolExpr <boolean> (39)
    on left: 17 18 19 20 21, on right: 2 7 17 18 19 21


State 0

    0 $accept: . program $end

    NUM      shift, and go to state 1
    BOOL     shift, and go to state 2
    ID       shift, and go to state 3
    NOT      shift, and go to state 4
    INT      shift, and go to state 5
    BOOLEAN  shift, and go to state 6
    '-'      shift, and go to state 7
    '('      shift, and go to state 8

    program      go to state 9
    declaration  go to state 10
    typedec      go to state 11
    intExpr      go to state 12
    boolExpr     go to state 13


State 1

   14 intExpr: NUM .

    $default  reduce using rule 14 (intExpr)


State 2

   20 boolExpr: BOOL .

    $default  reduce using rule 20 (boolExpr)


State 3

    3 program: ID . '\n'

    '\n'  shift, and go to state 14


State 4

   19 boolExpr: NOT . boolExpr

    BOOL  shift, and go to state 2
    NOT   shift, and go to state 4
    '('   shift, and go to state 15

    boolExpr  go to state 16


State 5

    4 program: INT . '\n'
    8 typedec: INT .

    '\n'  shift, and go to state 17

    $default  reduce using rule 8 (typedec)


State 6

    9 typedec: BOOLEAN .

    $default  reduce using rule 9 (typedec)


State 7

   15 intExpr: '-' . intExpr

    NUM  shift, and go to state 1
    '-'  shift, and go to state 7
    '('  shift, and go to state 18

    intExpr  go to state 19


State 8

   16 intExpr: '(' . intExpr ')'
   21 boolExpr: '(' . boolExpr ')'

    NUM   shift, and go to state 1
    BOOL  shift, and go to state 2
    NOT   shift, and go to state 4
    '-'   shift, and go to state 7
    '('   shift, and go to state 8

    intExpr   go to state 20
    boolExpr  go to state 21


State 9

    0 $accept: program . $end

    $end  shift, and go to state 22


State 10

    5 program: declaration .

    $default  reduce using rule 5 (program)


State 11

    6 declaration: typedec . ID ':' intExpr '\n'
    7            | typedec . ID ':' boolExpr '\n'

    ID  shift, and go to state 23


State 12

    1 program: intExpr . '\n'
   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr

    '-'   shift, and go to state 24
    '+'   shift, and go to state 25
    '*'   shift, and go to state 26
    '/'   shift, and go to state 27
    '\n'  shift, and go to state 28


State 13

    2 program: boolExpr . '\n'
   17 boolExpr: boolExpr . AND boolExpr
   18         | boolExpr . OR boolExpr

    AND   shift, and go to state 29
    OR    shift, and go to state 30
    '\n'  shift, and go to state 31


State 14

    3 program: ID '\n' .

    $default  reduce using rule 3 (program)


State 15

   21 boolExpr: '(' . boolExpr ')'

    BOOL  shift, and go to state 2
    NOT   shift, and go to state 4
    '('   shift, and go to state 15

    boolExpr  go to state 21


State 16

   17 boolExpr: boolExpr . AND boolExpr
   18         | boolExpr . OR boolExpr
   19         | NOT boolExpr .

    $default  reduce using rule 19 (boolExpr)


State 17

    4 program: INT '\n' .

    $default  reduce using rule 4 (program)


State 18

   16 intExpr: '(' . intExpr ')'

    NUM  shift, and go to state 1
    '-'  shift, and go to state 7
    '('  shift, and go to state 18

    intExpr  go to state 20


State 19

   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr
   15        | '-' intExpr .

    $default  reduce using rule 15 (intExpr)


State 20

   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr
   16        | '(' intExpr . ')'

    '-'  shift, and go to state 24
    '+'  shift, and go to state 25
    '*'  shift, and go to state 26
    '/'  shift, and go to state 27
    ')'  shift, and go to state 32


State 21

   17 boolExpr: boolExpr . AND boolExpr
   18         | boolExpr . OR boolExpr
   21         | '(' boolExpr . ')'

    AND  shift, and go to state 29
    OR   shift, and go to state 30
    ')'  shift, and go to state 33


State 22

    0 $accept: program $end .

    $default  accept


State 23

    6 declaration: typedec ID . ':' intExpr '\n'
    7            | typedec ID . ':' boolExpr '\n'

    ':'  shift, and go to state 34


State 24

   11 intExpr: intExpr '-' . intExpr

    NUM  shift, and go to state 1
    '-'  shift, and go to state 7
    '('  shift, and go to state 18

    intExpr  go to state 35


State 25

   10 intExpr: intExpr '+' . intExpr

    NUM  shift, and go to state 1
    '-'  shift, and go to state 7
    '('  shift, and go to state 18

    intExpr  go to state 36


State 26

   12 intExpr: intExpr '*' . intExpr

    NUM  shift, and go to state 1
    '-'  shift, and go to state 7
    '('  shift, and go to state 18

    intExpr  go to state 37


State 27

   13 intExpr: intExpr '/' . intExpr

    NUM  shift, and go to state 1
    '-'  shift, and go to state 7
    '('  shift, and go to state 18

    intExpr  go to state 38


State 28

    1 program: intExpr '\n' .

    $default  reduce using rule 1 (program)


State 29

   17 boolExpr: boolExpr AND . boolExpr

    BOOL  shift, and go to state 2
    NOT   shift, and go to state 4
    '('   shift, and go to state 15

    boolExpr  go to state 39


State 30

   18 boolExpr: boolExpr OR . boolExpr

    BOOL  shift, and go to state 2
    NOT   shift, and go to state 4
    '('   shift, and go to state 15

    boolExpr  go to state 40


State 31

    2 program: boolExpr '\n' .

    $default  reduce using rule 2 (program)


State 32

   16 intExpr: '(' intExpr ')' .

    $default  reduce using rule 16 (intExpr)


State 33

   21 boolExpr: '(' boolExpr ')' .

    $default  reduce using rule 21 (boolExpr)


State 34

    6 declaration: typedec ID ':' . intExpr '\n'
    7            | typedec ID ':' . boolExpr '\n'

    NUM   shift, and go to state 1
    BOOL  shift, and go to state 2
    NOT   shift, and go to state 4
    '-'   shift, and go to state 7
    '('   shift, and go to state 8

    intExpr   go to state 41
    boolExpr  go to state 42


State 35

   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   11        | intExpr '-' intExpr .
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr

    '*'  shift, and go to state 26
    '/'  shift, and go to state 27

    $default  reduce using rule 11 (intExpr)


State 36

   10 intExpr: intExpr . '+' intExpr
   10        | intExpr '+' intExpr .
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr

    '*'  shift, and go to state 26
    '/'  shift, and go to state 27

    $default  reduce using rule 10 (intExpr)


State 37

   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   12        | intExpr '*' intExpr .
   13        | intExpr . '/' intExpr

    $default  reduce using rule 12 (intExpr)


State 38

   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr
   13        | intExpr '/' intExpr .

    $default  reduce using rule 13 (intExpr)


State 39

   17 boolExpr: boolExpr . AND boolExpr
   17         | boolExpr AND boolExpr .
   18         | boolExpr . OR boolExpr

    $default  reduce using rule 17 (boolExpr)


State 40

   17 boolExpr: boolExpr . AND boolExpr
   18         | boolExpr . OR boolExpr
   18         | boolExpr OR boolExpr .

    $default  reduce using rule 18 (boolExpr)


State 41

    6 declaration: typedec ID ':' intExpr . '\n'
   10 intExpr: intExpr . '+' intExpr
   11        | intExpr . '-' intExpr
   12        | intExpr . '*' intExpr
   13        | intExpr . '/' intExpr

    '-'   shift, and go to state 24
    '+'   shift, and go to state 25
    '*'   shift, and go to state 26
    '/'   shift, and go to state 27
    '\n'  shift, and go to state 43


State 42

    7 declaration: typedec ID ':' boolExpr . '\n'
   17 boolExpr: boolExpr . AND boolExpr
   18         | boolExpr . OR boolExpr

    AND   shift, and go to state 29
    OR    shift, and go to state 30
    '\n'  shift, and go to state 44


State 43

    6 declaration: typedec ID ':' intExpr '\n' .

    $default  reduce using rule 6 (declaration)


State 44

    7 declaration: typedec ID ':' boolExpr '\n' .

    $default  reduce using rule 7 (declaration)
