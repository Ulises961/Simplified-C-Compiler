Nonterminals useless in grammar

    relOp


Terminals unused in grammar

    CHAR
    BREAK
    IF
    ELSE
    WHILE
    DO
    EQ
    NEQ
    GREQ
    GR
    SM
    SMEQ
    TRUE
    FALSE
    RETURN


Grammar

    0 $accept: program $end

    1 program: program statement '\n'
    2        | %empty

    3 statement: expr
    4          | varDecl

    5 expr: intExpr
    6     | boolExpr

    7 intExpr: intExpr '+' intExpr
    8        | intExpr '-' intExpr
    9        | intExpr '*' intExpr
   10        | intExpr '/' intExpr
   11        | NUM
   12        | '-' intExpr
   13        | '(' intExpr ')'

   14 boolExpr: boolExpr AND boolExpr
   15         | boolExpr OR boolExpr
   16         | NOT boolExpr
   17         | BOOL
   18         | '(' boolExpr ')'

   19 varDecl: typeSpec ID ':' expr

   20 typeSpec: INT
   21         | BOOLEAN


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1
    '(' (40) 13 18
    ')' (41) 13 18
    '*' (42) 9
    '+' (43) 7
    '-' (45) 8 12
    '/' (47) 10
    ':' (58) 19
    error (256)
    NUM <integer> (258) 11
    BOOL <integer> (259) 17
    ID <lexeme> (260) 19
    CHAR (261)
    BREAK (262)
    AND (263) 14
    OR (264) 15
    NOT (265) 16
    IF (266)
    ELSE (267)
    WHILE (268)
    DO (269)
    EQ (270)
    NEQ (271)
    GREQ (272)
    GR (273)
    SM (274)
    SMEQ (275)
    TRUE (276)
    FALSE (277)
    RETURN (278)
    INT <lexeme> (279) 20
    BOOLEAN <lexeme> (280) 21
    UMINUS (281)


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    program (36)
        on left: 1 2
        on right: 0 1
    statement (37)
        on left: 3 4
        on right: 1
    expr <integer> (38)
        on left: 5 6
        on right: 3 19
    intExpr <integer> (39)
        on left: 7 8 9 10 11 12 13
        on right: 5 7 8 9 10 12 13
    boolExpr <integer> (40)
        on left: 14 15 16 17 18
        on right: 6 14 15 16 18
    varDecl (41)
        on left: 19
        on right: 4
    typeSpec <lexeme> (42)
        on left: 20 21
        on right: 19


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . statement '\n'

    $end     shift, and go to state 2
    NUM      shift, and go to state 3
    BOOL     shift, and go to state 4
    NOT      shift, and go to state 5
    INT      shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    '-'      shift, and go to state 8
    '('      shift, and go to state 9

    statement  go to state 10
    expr       go to state 11
    intExpr    go to state 12
    boolExpr   go to state 13
    varDecl    go to state 14
    typeSpec   go to state 15


State 2

    0 $accept: program $end .

    $default  accept


State 3

   11 intExpr: NUM .

    $default  reduce using rule 11 (intExpr)


State 4

   17 boolExpr: BOOL .

    $default  reduce using rule 17 (boolExpr)


State 5

   16 boolExpr: NOT . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 16

    boolExpr  go to state 17


State 6

   20 typeSpec: INT .

    $default  reduce using rule 20 (typeSpec)


State 7

   21 typeSpec: BOOLEAN .

    $default  reduce using rule 21 (typeSpec)


State 8

   12 intExpr: '-' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 8
    '('  shift, and go to state 18

    intExpr  go to state 19


State 9

   13 intExpr: '(' . intExpr ')'
   18 boolExpr: '(' . boolExpr ')'

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 8
    '('   shift, and go to state 9

    intExpr   go to state 20
    boolExpr  go to state 21


State 10

    1 program: program statement . '\n'

    '\n'  shift, and go to state 22


State 11

    3 statement: expr .

    $default  reduce using rule 3 (statement)


State 12

    5 expr: intExpr .
    7 intExpr: intExpr . '+' intExpr
    8        | intExpr . '-' intExpr
    9        | intExpr . '*' intExpr
   10        | intExpr . '/' intExpr

    '-'  shift, and go to state 23
    '+'  shift, and go to state 24
    '*'  shift, and go to state 25
    '/'  shift, and go to state 26

    $default  reduce using rule 5 (expr)


State 13

    6 expr: boolExpr .
   14 boolExpr: boolExpr . AND boolExpr
   15         | boolExpr . OR boolExpr

    AND  shift, and go to state 27
    OR   shift, and go to state 28

    $default  reduce using rule 6 (expr)


State 14

    4 statement: varDecl .

    $default  reduce using rule 4 (statement)


State 15

   19 varDecl: typeSpec . ID ':' expr

    ID  shift, and go to state 29


State 16

   18 boolExpr: '(' . boolExpr ')'

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 16

    boolExpr  go to state 21


State 17

   14 boolExpr: boolExpr . AND boolExpr
   15         | boolExpr . OR boolExpr
   16         | NOT boolExpr .

    $default  reduce using rule 16 (boolExpr)


State 18

   13 intExpr: '(' . intExpr ')'

    NUM  shift, and go to state 3
    '-'  shift, and go to state 8
    '('  shift, and go to state 18

    intExpr  go to state 20


State 19

    7 intExpr: intExpr . '+' intExpr
    8        | intExpr . '-' intExpr
    9        | intExpr . '*' intExpr
   10        | intExpr . '/' intExpr
   12        | '-' intExpr .

    $default  reduce using rule 12 (intExpr)


State 20

    7 intExpr: intExpr . '+' intExpr
    8        | intExpr . '-' intExpr
    9        | intExpr . '*' intExpr
   10        | intExpr . '/' intExpr
   13        | '(' intExpr . ')'

    '-'  shift, and go to state 23
    '+'  shift, and go to state 24
    '*'  shift, and go to state 25
    '/'  shift, and go to state 26
    ')'  shift, and go to state 30


State 21

   14 boolExpr: boolExpr . AND boolExpr
   15         | boolExpr . OR boolExpr
   18         | '(' boolExpr . ')'

    AND  shift, and go to state 27
    OR   shift, and go to state 28
    ')'  shift, and go to state 31


State 22

    1 program: program statement '\n' .

    $default  reduce using rule 1 (program)


State 23

    8 intExpr: intExpr '-' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 8
    '('  shift, and go to state 18

    intExpr  go to state 32


State 24

    7 intExpr: intExpr '+' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 8
    '('  shift, and go to state 18

    intExpr  go to state 33


State 25

    9 intExpr: intExpr '*' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 8
    '('  shift, and go to state 18

    intExpr  go to state 34


State 26

   10 intExpr: intExpr '/' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 8
    '('  shift, and go to state 18

    intExpr  go to state 35


State 27

   14 boolExpr: boolExpr AND . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 16

    boolExpr  go to state 36


State 28

   15 boolExpr: boolExpr OR . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 16

    boolExpr  go to state 37


State 29

   19 varDecl: typeSpec ID . ':' expr

    ':'  shift, and go to state 38


State 30

   13 intExpr: '(' intExpr ')' .

    $default  reduce using rule 13 (intExpr)


State 31

   18 boolExpr: '(' boolExpr ')' .

    $default  reduce using rule 18 (boolExpr)


State 32

    7 intExpr: intExpr . '+' intExpr
    8        | intExpr . '-' intExpr
    8        | intExpr '-' intExpr .
    9        | intExpr . '*' intExpr
   10        | intExpr . '/' intExpr

    '*'  shift, and go to state 25
    '/'  shift, and go to state 26

    $default  reduce using rule 8 (intExpr)


State 33

    7 intExpr: intExpr . '+' intExpr
    7        | intExpr '+' intExpr .
    8        | intExpr . '-' intExpr
    9        | intExpr . '*' intExpr
   10        | intExpr . '/' intExpr

    '*'  shift, and go to state 25
    '/'  shift, and go to state 26

    $default  reduce using rule 7 (intExpr)


State 34

    7 intExpr: intExpr . '+' intExpr
    8        | intExpr . '-' intExpr
    9        | intExpr . '*' intExpr
    9        | intExpr '*' intExpr .
   10        | intExpr . '/' intExpr

    $default  reduce using rule 9 (intExpr)


State 35

    7 intExpr: intExpr . '+' intExpr
    8        | intExpr . '-' intExpr
    9        | intExpr . '*' intExpr
   10        | intExpr . '/' intExpr
   10        | intExpr '/' intExpr .

    $default  reduce using rule 10 (intExpr)


State 36

   14 boolExpr: boolExpr . AND boolExpr
   14         | boolExpr AND boolExpr .
   15         | boolExpr . OR boolExpr

    $default  reduce using rule 14 (boolExpr)


State 37

   14 boolExpr: boolExpr . AND boolExpr
   15         | boolExpr . OR boolExpr
   15         | boolExpr OR boolExpr .

    $default  reduce using rule 15 (boolExpr)


State 38

   19 varDecl: typeSpec ID ':' . expr

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 8
    '('   shift, and go to state 9

    expr      go to state 39
    intExpr   go to state 12
    boolExpr  go to state 13


State 39

   19 varDecl: typeSpec ID ':' expr .

    $default  reduce using rule 19 (varDecl)
