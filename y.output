Nonterminals useless in grammar

    typeSpec
    relOp


Terminals unused in grammar

    ID
    CHAR
    BREAK
    IF
    ELSE
    WHILE
    DO
    EQ
    NEQ
    GREQ
    GR
    SM
    SMEQ
    TRUE
    FALSE
    RETURN
    INT
    BOOLEAN


Grammar

    0 $accept: program $end

    1 program: program statement '\n'
    2        | %empty

    3 statement: expr

    4 expr: intExpr
    5     | boolExpr

    6 intExpr: intExpr '+' intExpr
    7        | intExpr '-' intExpr
    8        | intExpr '*' intExpr
    9        | intExpr '/' intExpr
   10        | NUM
   11        | '-' intExpr
   12        | '(' intExpr ')'

   13 boolExpr: boolExpr AND boolExpr
   14         | boolExpr OR boolExpr
   15         | NOT boolExpr
   16         | BOOL
   17         | '(' boolExpr ')'


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1
    '(' (40) 12 17
    ')' (41) 12 17
    '*' (42) 8
    '+' (43) 6
    '-' (45) 7 11
    '/' (47) 9
    error (256)
    NUM <integer> (258) 10
    BOOL <boolean> (259) 16
    ID <lexeme> (260)
    CHAR (261)
    BREAK (262)
    AND (263) 13
    OR (264) 14
    NOT (265) 15
    IF (266)
    ELSE (267)
    WHILE (268)
    DO (269)
    EQ (270)
    NEQ (271)
    GREQ (272)
    GR (273)
    SM (274)
    SMEQ (275)
    TRUE (276)
    FALSE (277)
    RETURN (278)
    INT <lexeme> (279)
    BOOLEAN <lexeme> (280)
    UMINUS (281)


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    program (35)
        on left: 1 2
        on right: 0 1
    statement (36)
        on left: 3
        on right: 1
    expr (37)
        on left: 4 5
        on right: 3
    intExpr <integer> (38)
        on left: 6 7 8 9 10 11 12
        on right: 4 6 7 8 9 11 12
    boolExpr <boolean> (39)
        on left: 13 14 15 16 17
        on right: 5 13 14 15 17


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . statement '\n'

    $end  shift, and go to state 2
    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 6
    '('   shift, and go to state 7

    statement  go to state 8
    expr       go to state 9
    intExpr    go to state 10
    boolExpr   go to state 11


State 2

    0 $accept: program $end .

    $default  accept


State 3

   10 intExpr: NUM .

    $default  reduce using rule 10 (intExpr)


State 4

   16 boolExpr: BOOL .

    $default  reduce using rule 16 (boolExpr)


State 5

   15 boolExpr: NOT . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 12

    boolExpr  go to state 13


State 6

   11 intExpr: '-' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 6
    '('  shift, and go to state 14

    intExpr  go to state 15


State 7

   12 intExpr: '(' . intExpr ')'
   17 boolExpr: '(' . boolExpr ')'

    NUM   shift, and go to state 3
    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '-'   shift, and go to state 6
    '('   shift, and go to state 7

    intExpr   go to state 16
    boolExpr  go to state 17


State 8

    1 program: program statement . '\n'

    '\n'  shift, and go to state 18


State 9

    3 statement: expr .

    $default  reduce using rule 3 (statement)


State 10

    4 expr: intExpr .
    6 intExpr: intExpr . '+' intExpr
    7        | intExpr . '-' intExpr
    8        | intExpr . '*' intExpr
    9        | intExpr . '/' intExpr

    '-'  shift, and go to state 19
    '+'  shift, and go to state 20
    '*'  shift, and go to state 21
    '/'  shift, and go to state 22

    $default  reduce using rule 4 (expr)


State 11

    5 expr: boolExpr .
   13 boolExpr: boolExpr . AND boolExpr
   14         | boolExpr . OR boolExpr

    AND  shift, and go to state 23
    OR   shift, and go to state 24

    $default  reduce using rule 5 (expr)


State 12

   17 boolExpr: '(' . boolExpr ')'

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 12

    boolExpr  go to state 17


State 13

   13 boolExpr: boolExpr . AND boolExpr
   14         | boolExpr . OR boolExpr
   15         | NOT boolExpr .

    $default  reduce using rule 15 (boolExpr)


State 14

   12 intExpr: '(' . intExpr ')'

    NUM  shift, and go to state 3
    '-'  shift, and go to state 6
    '('  shift, and go to state 14

    intExpr  go to state 16


State 15

    6 intExpr: intExpr . '+' intExpr
    7        | intExpr . '-' intExpr
    8        | intExpr . '*' intExpr
    9        | intExpr . '/' intExpr
   11        | '-' intExpr .

    $default  reduce using rule 11 (intExpr)


State 16

    6 intExpr: intExpr . '+' intExpr
    7        | intExpr . '-' intExpr
    8        | intExpr . '*' intExpr
    9        | intExpr . '/' intExpr
   12        | '(' intExpr . ')'

    '-'  shift, and go to state 19
    '+'  shift, and go to state 20
    '*'  shift, and go to state 21
    '/'  shift, and go to state 22
    ')'  shift, and go to state 25


State 17

   13 boolExpr: boolExpr . AND boolExpr
   14         | boolExpr . OR boolExpr
   17         | '(' boolExpr . ')'

    AND  shift, and go to state 23
    OR   shift, and go to state 24
    ')'  shift, and go to state 26


State 18

    1 program: program statement '\n' .

    $default  reduce using rule 1 (program)


State 19

    7 intExpr: intExpr '-' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 6
    '('  shift, and go to state 14

    intExpr  go to state 27


State 20

    6 intExpr: intExpr '+' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 6
    '('  shift, and go to state 14

    intExpr  go to state 28


State 21

    8 intExpr: intExpr '*' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 6
    '('  shift, and go to state 14

    intExpr  go to state 29


State 22

    9 intExpr: intExpr '/' . intExpr

    NUM  shift, and go to state 3
    '-'  shift, and go to state 6
    '('  shift, and go to state 14

    intExpr  go to state 30


State 23

   13 boolExpr: boolExpr AND . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 12

    boolExpr  go to state 31


State 24

   14 boolExpr: boolExpr OR . boolExpr

    BOOL  shift, and go to state 4
    NOT   shift, and go to state 5
    '('   shift, and go to state 12

    boolExpr  go to state 32


State 25

   12 intExpr: '(' intExpr ')' .

    $default  reduce using rule 12 (intExpr)


State 26

   17 boolExpr: '(' boolExpr ')' .

    $default  reduce using rule 17 (boolExpr)


State 27

    6 intExpr: intExpr . '+' intExpr
    7        | intExpr . '-' intExpr
    7        | intExpr '-' intExpr .
    8        | intExpr . '*' intExpr
    9        | intExpr . '/' intExpr

    '*'  shift, and go to state 21
    '/'  shift, and go to state 22

    $default  reduce using rule 7 (intExpr)


State 28

    6 intExpr: intExpr . '+' intExpr
    6        | intExpr '+' intExpr .
    7        | intExpr . '-' intExpr
    8        | intExpr . '*' intExpr
    9        | intExpr . '/' intExpr

    '*'  shift, and go to state 21
    '/'  shift, and go to state 22

    $default  reduce using rule 6 (intExpr)


State 29

    6 intExpr: intExpr . '+' intExpr
    7        | intExpr . '-' intExpr
    8        | intExpr . '*' intExpr
    8        | intExpr '*' intExpr .
    9        | intExpr . '/' intExpr

    $default  reduce using rule 8 (intExpr)


State 30

    6 intExpr: intExpr . '+' intExpr
    7        | intExpr . '-' intExpr
    8        | intExpr . '*' intExpr
    9        | intExpr . '/' intExpr
    9        | intExpr '/' intExpr .

    $default  reduce using rule 9 (intExpr)


State 31

   13 boolExpr: boolExpr . AND boolExpr
   13         | boolExpr AND boolExpr .
   14         | boolExpr . OR boolExpr

    $default  reduce using rule 13 (boolExpr)


State 32

   13 boolExpr: boolExpr . AND boolExpr
   14         | boolExpr . OR boolExpr
   14         | boolExpr OR boolExpr .

    $default  reduce using rule 14 (boolExpr)
