program -> typeSpec varDeclInit; program | stmt program
varDeclInit -> varDeclId | varDeclId : simpleExp
varDeclId -> ID | ID[INT]
typeSpec -> int | bool | char
stmt -> exp; 
        |stmt;
        | ; 
        | if (simpleExp) compoundStmt 
        | if (simpleExp) compundStmt else compundStmt 
        | while simpleExp do compoundStmt 
        | break;
        | return;
        | return exp ;

compoundStmt -> {localDecls stmt}
localDecls -> localDecls scopedVarDecl | scopedVarDecl
scopedVarDecl -> typeSpec varDeclInit;
exp -> program | simpleExp
simpleExp -> simpleExp or simpleExp | andExp | true | false
andExp -> andExp and unaryRelExp | unaryRelExp 
unaryRelExp -> not unaryRelExp | sumExp relOp sumExp | unaryExp
relOp -> <= | < | >| >= | == | != 
sumExp ->  sumExp sumOp mulExp | mulExp
sumOp -> + | -
mulExp -> mulExp mulOp unaryExp | unaryExp
mulOp -> * | / 
unaryExp -> - unaryExp | ID 



bool x : true;
bool y : false;
if (x or y) { x = false;}
return;

